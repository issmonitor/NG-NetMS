package NGNMS::Scheduler::Archive;
use strict;
use warnings FATAL => 'all';
use Moo;
use Config::Crontab;

use Emsgd qw/diag/;
with "NGNMS::Log4Role";
with "NGNMS::Scheduler::SchedulerRole";

has   '+crontab_key' => (default => '## archive');
has '+exec_file' => (default =>  $ENV{NGNMS_HOME}."/bin/archive_run.sh");
=for config record

  {
     'arc_expire' => '6h',
     'arc_gzip' => 1,
     'arc_delete' => '7d',
     'arc_period' => '30 2 * * *',
     'log_syslog' => 1,
     'arc_enable' => 1,
     'arc_path' => 'archive',
     'log_level' => 1
   };

=cut

sub __schedule_archiver {
    my $self = shift;
    my $conf = shift;

    my $schedule = $conf->{arc_period};
    # Parse and validate period
    $self->logger->error("schedules does not configured in database") && return unless $schedule;
    $self->logger->error("Wrong period in database: '$schedule'") && return unless $schedule =~ /^[\s\d\*\-\/]+$/;

    $schedule =~ s/\s+/ /g;

    my $file_content = $self->compose_file;
    $self->update_file($file_content) || $self->logger->debug("file $self->{exec_file} requires no changes");

    $self->save($schedule)
        ? $self->logger->info("add new schedule for archiver [$schedule]")
        : $self->logger->debug("archive schedule not changed, skip updating crontab")
    ;

}

sub schedule{
    my $self = shift;

    #@inject PGSQL
    my $conf = $self->DB->dbh->selectrow_hashref( "SELECT arc_expire, arc_delete, arc_period, arc_enable, arc_path, log_syslog, log_level, arc_gzip FROM archive_conf LIMIT 1" );
    if ($conf->{arc_enable}) {
        $self->__schedule_archiver($conf);
    } else {
        $self->logger->info('uncheduling archiver');
        $self->remove();

    }
}

sub compose_file{
    my $self = shift;
    my $s = <<"END_MESSAGE";
#!/bin/sh
# This script is used for scheduled archiving of the events in DB
# It is invoked by Crontab accordingly to the user configuration
# Use Web/Gui to enable/disable archiving
# !!! DO NOT EDIT THIS FILE !!!
/usr/bin/perl $ENV{NGNMS_HOME}/bin/archive.pl --dump -l $self->{dbhost} -u $self->{dbuser} -w $self->{dbpassword} -d $self->{dbname}  -P $self->{dbport}
END_MESSAGE
    return $s;
}
1;